# Lab 21 Summer 2019

Topics of the Day:

- Disjoint Sets
- Minimum Spanning Trees
- Prim's Algorithm
- Kruskal's Algorithm 

## Exercises

### `UnionFind.java`

Make sure students understand disjoint sets and how to use an array to represent
the data structure. Students will have to implement the disjoint sets using this
representation, and the `find` and `union` methods will most likely be the most
challenging. When `union`-ing two sets that have the same size, make sure you
make the first (`v1`) the new root. Students will have to implement the two
optimizations learned in lab (path compression and union by size).

Students should throw an `IllegalArgumentException` for elements that don't
exist for `find` and do nothing for `union`-ing an element with itself or if the
elements are already connected. It is recommended to draw out the
array-representation of the disjoint sets so students can visualize how they
will be changing the array based on the unions/finds that are called.

### Union Find Testing

If students aren't passing the complete test, ask them to write a test and go
through an example on paper or through the debugger to see if their code works
as they expect it to.

There is a test provided in the `UnionFindTest` class that students can run if
they want to test their implementation locally. They can model other tests after
this.

### Prim's Algorithm

The `Graph` representation is different from what they had during the graph
labs, so make sure students have a good understanding of this new
representation before starting.

Pseudocode is provided in the lab, but this algorithm is very similar to
Dijkstra's algorithm, so make sure to tell students to look at their code for
Dijkstra's from lab 17 if they need some inspiration. The main thing to tell
them is that in Prim's algorithm, their fringe should have priority "distance
from the MST" while in Dijkstra's algorithm, their fringe has priority "distance
from the start vertex".

### Kruskal's Algorithm

Pseudocode is provided in lab as well. Students should be using their
`UnionFind` that they created earlier in order to determine whether two vertices
are connected or not. `allEdges` is a `TreeMap` of `Edge` objects, so when we
iterate over the edges they will be provided in sorted order (which is necessary
for Kruskal's). See the `Edge`'s `compareTo` method to see why they will be
iterated over in sorted order.

### Graph Testing

Be aware that the `randomGraph` method generates graphs randomly, leading to
potentially unconnected graphs. Vertices should also be added to the Graph
instances before working with them (otherwise NullPointerExceptions can occur).

I would recommend that students use the `loadFromText` method in
`GraphTest.java` and create text files to test their graphs. A few examples have
been provided in the skeleton already so they should just copy that.
